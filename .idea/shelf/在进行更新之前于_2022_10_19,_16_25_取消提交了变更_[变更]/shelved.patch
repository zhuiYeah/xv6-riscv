Index: user/pingpong.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"kernel/types.h\"\n#include \"kernel/stat.h\"\n#include \"user/user.h\"\n\n#define READEND 0\n#define WRITEEND 1\n\nint main(int argc, char *argv[])\n{\n    //建立两个管道\n    // parentfd父进程写子进程读\n    // childfd子进程写父进程读\n    int parentfd[2];\n    int childfd[2];\n\n    char buf[10];\n\n    pipe(parentfd);\n    pipe(childfd);\n\n    int pid = fork();\n    if (pid < 0)\n    {\n        fprintf(2, \"fork error\");\n        exit(1);\n    }\n    //子进程\n    //子进程从parentfd读取，并向childfd写入\n    else if (pid == 0)\n    {\n        close(parentfd[WRITEEND]) ;\n        close(childfd[READEND]) ;\n        read(parentfd[READEND],buf,4);\n        printf(\"我是子进程  %d : received %s \\n\",getpid(),buf);\n        write(childfd[WRITEEND],\"pong\",4);\n        close(childfd[WRITEEND]);\n    }\n    //父进程 \n    //父进程向parentfd写入 ，并从childfd读取\n    else\n    {\n        close(parentfd[READEND]);\n        close(childfd[WRITEEND]);\n        write(parentfd[WRITEEND],\"ping\",4);\n        close(parentfd[WRITEEND]);\n        read(childfd[READEND],buf,4);\n        printf(\"我是父进程 %d : received %s \\n \",getpid,buf);\n    }\n\n    exit(0);\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/pingpong.c b/user/pingpong.c
--- a/user/pingpong.c	(revision 7c222947ba1c9cf6f57db37a9219488759c40008)
+++ b/user/pingpong.c	(date 1666167811807)
@@ -28,23 +28,23 @@
     //子进程从parentfd读取，并向childfd写入
     else if (pid == 0)
     {
-        close(parentfd[WRITEEND]) ;
-        close(childfd[READEND]) ;
-        read(parentfd[READEND],buf,4);
-        printf("我是子进程  %d : received %s \n",getpid(),buf);
-        write(childfd[WRITEEND],"pong",4);
+        close(parentfd[WRITEEND]);
+        close(childfd[READEND]);
+        read(parentfd[READEND], buf, 4);
+        printf("我是子进程  %d : received %s \n", getpid(), buf);
+        write(childfd[WRITEEND], "pong", 4);
         close(childfd[WRITEEND]);
     }
-    //父进程 
+    //父进程
     //父进程向parentfd写入 ，并从childfd读取
     else
     {
         close(parentfd[READEND]);
         close(childfd[WRITEEND]);
-        write(parentfd[WRITEEND],"ping",4);
+        write(parentfd[WRITEEND], "ping", 4);
         close(parentfd[WRITEEND]);
-        read(childfd[READEND],buf,4);
-        printf("我是父进程 %d : received %s \n ",getpid,buf);
+        read(childfd[READEND], buf, 4);
+        printf("我是父进程 %d : received %s \n ", getpid, buf);
     }
 
     exit(0);
